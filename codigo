<?php namespace PageRestrictForWooCommerce\Includes\Common; use PageRestrictForWooCommerce\Includes\Common\Restrict_Types; use PageRestrictForWooCommerce\Includes\WooCommerce\Products_Bought; use PageRestrictForWooCommerce\Includes\Common\Page_Plugin_Options; class Section_Blocks { protected $products_bought, $restrict, $user_id, $post_id, $page_options, $products, $not_all_products_required, $general_not_bought_page, $general_login_page, $not_bought_page, $redirect_not_bought, $not_logged_in_page, $redirect_not_logged_in, $not_bought_section, $not_logged_in_section, $redirect_general_not_bought, $redirect_general_login, $general_not_bought_section, $general_login_section, $days, $hours, $minutes, $seconds, $views; public function __construct() { $this->user_id = get_current_user_id(); $this->post_id = get_the_ID(); $this->restrict = new Restrict_Types(); $this->products_bought = new Products_Bought(); $this->page_options = new Page_Plugin_Options(); $this->products = $this->page_options->get_page_options($this->post_id, 'prwc_products'); $this->not_all_products_required = $this->page_options->get_page_options($this->post_id, 'prwc_not_all_products_required'); $this->days = $this->page_options->get_page_options($this->post_id, 'prwc_timeout_days'); $this->hours = $this->page_options->get_page_options($this->post_id, 'prwc_timeout_hours'); $this->minutes = $this->page_options->get_page_options($this->post_id, 'prwc_timeout_minutes'); $this->seconds = $this->page_options->get_page_options($this->post_id, 'prwc_timeout_seconds'); $this->views = $this->page_options->get_page_options($this->post_id, 'prwc_timeout_views'); $this->not_bought_page = $this->page_options->get_page_options($this->post_id, 'prwc_not_bought_page'); $this->redirect_not_bought = $this->page_options->get_page_options($this->post_id, 'prwc_redirect_not_bought'); $this->not_logged_in_page = $this->page_options->get_page_options($this->post_id, 'prwc_not_logged_in_page'); $this->redirect_not_logged_in = $this->page_options->get_page_options($this->post_id, 'prwc_redirect_not_logged_in'); $this->general_not_bought_page = $this->page_options->get_general_options('prwc_general_not_bought_page'); $this->general_login_page = $this->page_options->get_general_options('prwc_general_login_page'); $this->general_not_bought_section = $this->page_options->get_general_options('prwc_general_not_bought_section'); $this->general_login_section = $this->page_options->get_general_options('prwc_general_login_section'); $this->redirect_general_not_bought = $this->page_options->get_general_options('prwc_general_redirect_not_bought'); $this->redirect_general_login = $this->page_options->get_general_options('prwc_general_redirect_login'); } public function process_section(array $atts, string $content) { $a = shortcode_atts( array( 'products' => false, 'notAllProductsRequired' => false, 'defaultPageNotBoughtSections' => 0, 'defaultPageNotLoggedSections' => 0, 'days' => 0, 'hours' => 0, 'minutes' => 0, 'seconds' => 0, 'views' => false, 'redirect' => false, 'inverse' => false, 'defRestrictMessage' => false, ), $atts); $overflow_error = false; $post_id = get_the_ID(); $user_id = get_current_user_id(); $inverse = (int) $a['inverse']; if (strlen(trim($inverse)) > 1) { trigger_error('Warning: Inverse attribute reached character limit.'); } if (is_array($a['products'])) { $products = []; for ($i = 0; $i < count($a['products']); $i++) { if (isset($a['products'][$i]['value'])) { $products[] = $a['products'][$i]['value']; } else { $products[] = $a['products'][$i]; } } } else { $products = array_map('sanitize_text_field', explode(',', $a['products'])); } if (array_sum(array_map('strlen', $products)) > 20 * count($products)) { trigger_error('Warning: Lock by Products attribute reached character limit.'); } $not_all_products_required = (int) sanitize_key($a['notAllProductsRequired']); if (strlen(trim($not_all_products_required)) > 1) { trigger_error('Warning: Not all products required attribute reached character limit.'); } $views = (int) sanitize_key($a['views']); if (strlen(trim($views)) > 20) { trigger_error('Warning: Views attribute reached character limit.'); } $days = (int) sanitize_key($a['days']); if (strlen(trim($days)) > 20) { trigger_error('Warning: Days attribute reached character limit.'); } $hours = (int) sanitize_key($a['hours']); if (strlen(trim($hours)) > 20) { trigger_error('Warning: Hours attribute reached character limit.'); } $minutes = (int) sanitize_key($a['minutes']); if (strlen(trim($minutes)) > 20) { trigger_error('Warning: Minutes attribute reached character limit.'); } $seconds = (int) sanitize_key($a['seconds']); if (strlen(trim($seconds)) > 20) { trigger_error('Warning: Seconds attribute reached character limit.'); } $show_products_needed = (int) sanitize_key($a['defRestrictMessage']); $default_page_not_bought_sections = (int) sanitize_key($a['defaultPageNotBoughtSections']); $default_page_not_logged_sections = (int) sanitize_key($a['defaultPageNotLoggedSections']); if (strlen(trim($show_products_needed)) > 1) { trigger_error('Warning: Default Restrict Message attribute reached character limit.'); } $timeout_sec = 0; if (gettype($products) == "string") { $products_arr = array_map(function ($item) { return (int) trim($item); }, explode(",", (string) $products)); } elseif (gettype($products) == "array") { $products_arr = $products; } if (!$products) { return do_shortcode($content); } $general_not_bought_section = $this->general_not_bought_section; $general_login_section = $this->general_login_section; $not_bought_section = $this->not_bought_section; $not_logged_section = $this->not_logged_in_section; if (is_user_logged_in()) { $timeout_sec = $this->calculate_timeout_sec($days, $hours, $minutes, $seconds); $views_left = $this->calculate_views_left($user_id, $post_id, $views); $bought_products = $this->products_bought->get_user_bought_products($user_id, $products); $show_not_bought = false; $show_not_logged = false; if ($not_all_products_required) { if (count(array_intersect($bought_products, $products_arr)) == count($products_arr)) { return do_shortcode($content); } else { $show_not_bought = true; } } elseif (count(array_intersect($bought_products, $products_arr)) > 0) { return do_shortcode($content); } else { $show_not_bought = true; } if (!$inverse && $views_left > 0) { return do_shortcode($content); } else { $show_not_bought = true; } if ($inverse && $views_left == 0) { return do_shortcode($content); } else { $show_not_bought = true; } } else { $timeout_sec = $this->calculate_timeout_sec($days, $hours, $minutes, $seconds); $views_left = $this->calculate_views_left(0, $post_id, $views); $show_not_logged = true; if ($views_left > 0) { return do_shortcode($content); } else { $show_not_logged = true; } if ($views_left == 0) { return do_shortcode($content); } else { $show_not_logged = true; } } if ($show_not_bought && is_user_logged_in()) { if ($default_page_not_bought_sections == 1 && $not_bought_page == 0) { return do_shortcode($content); } elseif ($default_page_not_bought_sections == 0 && $not_bought_page == 0) { $not_bought_section = $content; return do_shortcode($not_bought_section); } else { return do_shortcode($this->process_section($atts, $not_bought_section)); } } elseif ($show_not_logged && !is_user_logged_in()) { if ($default_page_not_logged_sections == 1 && $this->general_not_bought_page == 0) { return do_shortcode($content); } elseif ($default_page_not_logged_sections == 0 && $this->general_not_bought_page == 0) { $not_logged_section = $content; return do_shortcode($not_logged_section); } else { return do_shortcode($this->process_section($atts, $not_logged_section)); } } else { return do_shortcode($content); } } public function process_page(string $content) { return $this->process_page_redirect() . do_shortcode($content); } public function process_page_redirect() { return ''; } }
